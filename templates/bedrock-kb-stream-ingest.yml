# Amazon Bedrock Knowledge Base - Stream Ingest Data

AWSTemplateFormatVersion: '2010-09-09'
Description: 'Template to create required resources to showcase how streaming data can be directly ingested into Amazon Bedrock Knowledge Base'

# Mappings
Mappings:
  SubnetConfig:
    VPC:
      CIDR: '10.0.0.0/16'
    PublicSubnet1:
      CIDR: '10.0.0.0/20'
    PublicSubnet2:
      CIDR: '10.0.16.0/20'
    PrivateSubnet1:
      CIDR: '10.0.128.0/20'
    PrivateSubnet2:
      CIDR: '10.0.144.0/20'

# Resources
Resources:

# VPC

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !FindInMap ['SubnetConfig', 'VPC', 'CIDR']
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
        - Key: 'Name'
          Value: !Join [ "", [ !Ref "AWS::StackName","VPC" ] ]

# Subnets

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AssignIpv6AddressOnCreation: false
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: {Ref: 'AWS::Region'}
      VpcId: !Ref 'VPC'
      CidrBlock: !FindInMap ['SubnetConfig', 'PublicSubnet1', 'CIDR']
      MapPublicIpOnLaunch: false
      Tags:
        - Key: 'Name'
          Value: !Join [ "", [ !Ref "AWS::StackName","PublicSubnet1" ] ]

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AssignIpv6AddressOnCreation: false
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: {Ref: 'AWS::Region'}
      VpcId: !Ref 'VPC'
      CidrBlock: !FindInMap ['SubnetConfig', 'PublicSubnet2', 'CIDR']
      MapPublicIpOnLaunch: false
      Tags:
        - Key: 'Name'
          Value: !Join [ "", [ !Ref "AWS::StackName","PublicSubnet2" ] ]

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: {Ref: 'AWS::Region'}
      VpcId: !Ref 'VPC'
      CidrBlock: !FindInMap ['SubnetConfig', 'PrivateSubnet1', 'CIDR']
      MapPublicIpOnLaunch: false
      Tags:
        - Key: 'Name'
          Value: !Join [ "", [ !Ref "AWS::StackName","PrivateSubnet1" ] ]

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: {Ref: 'AWS::Region'}
      VpcId: !Ref 'VPC'
      CidrBlock: !FindInMap ['SubnetConfig', 'PrivateSubnet2', 'CIDR']
      MapPublicIpOnLaunch: false
      Tags:
        - Key: 'Name'
          Value: !Join [ "", [ !Ref "AWS::StackName","PrivateSubnet2" ] ]

# Internet Gateway

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Join [ "", [ !Ref "AWS::StackName","InternetGateway" ] ]

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref 'VPC'
      InternetGatewayId: !Ref 'InternetGateway'

# Elastic IP

  ElasticIPAddress:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Join [ "", [ !Ref "AWS::StackName","ElasticIP" ] ]

# NAT Gateway

  NATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt ElasticIPAddress.AllocationId
      SubnetId: !Ref 'PublicSubnet1'
      Tags:
        - Key: 'Name'
          Value: !Join [ "", [ !Ref "AWS::StackName","NATGateway" ] ]

# Public Routes

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC'
      Tags:
        - Key: 'Name'
          Value: !Join [ "", [ !Ref "AWS::StackName","PublicRouteTable" ] ]

  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref 'PublicRouteTable'
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref 'InternetGateway'

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'PublicSubnet1'
      RouteTableId: !Ref 'PublicRouteTable'

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'PublicSubnet2'
      RouteTableId: !Ref 'PublicRouteTable'

# Private Routes

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC'
      Tags:
        - Key: 'Name'
          Value: !Join [ "", [ !Ref "AWS::StackName","PrivateRouteTable" ] ]

  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref 'PrivateRouteTable'
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref 'NATGateway'

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'PrivateSubnet1'
      RouteTableId: !Ref 'PrivateRouteTable'
  
  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'PrivateSubnet2'
      RouteTableId: !Ref 'PrivateRouteTable'

# Security Groups

  MSKSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref 'VPC'
      GroupName: !Sub '${AWS::StackName}MSKSecurityGroup'
      GroupDescription: 'MSK Security Group'
      Tags:
        - Key: 'Name'
          Value: !Join [ "", [ !Ref "AWS::StackName","MSKSecurityGroup" ] ]

  LambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref 'VPC'
      GroupName: !Sub '${AWS::StackName}LambdaSecurityGroup'
      GroupDescription: 'Lambda Security Group'
      Tags:
        - Key: 'Name'
          Value: !Join [ "", [ !Ref "AWS::StackName","LambdaSecurityGroup" ] ] 
      
  SageMakerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref 'VPC'
      GroupName: !Sub '${AWS::StackName}SageMakerSecurityGroup'
      GroupDescription: 'SageMaker Security Group'
      Tags:
        - Key: 'Name'
          Value: !Join [ "", [ !Ref "AWS::StackName","SageMakerSecurityGroup" ] ] 

# Security Group Ingress Rules

  MSKSecurityGroupLambdaIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: 'Allow traffic from Lambda'
      IpProtocol: -1
      SourceSecurityGroupId: !GetAtt LambdaSecurityGroup.GroupId
      GroupId: !Ref MSKSecurityGroup

  MSKSecurityGroupSageMakerIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: 'Allow traffic from SageMaker'
      IpProtocol: -1
      SourceSecurityGroupId: !GetAtt SageMakerSecurityGroup.GroupId
      GroupId: !Ref MSKSecurityGroup

  MSKSecurityGroupSelfIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: 'Allow traffic from within'
      IpProtocol: -1
      SourceSecurityGroupId: !GetAtt MSKSecurityGroup.GroupId
      GroupId: !Ref MSKSecurityGroup

  LambdaSecurityGroupMSKIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: 'Allow traffic from MSK'
      IpProtocol: -1
      SourceSecurityGroupId: !GetAtt MSKSecurityGroup.GroupId
      GroupId: !Ref LambdaSecurityGroup

  LambdaSecurityGroupSageMakerIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: 'Allow traffic from SageMaker'
      IpProtocol: -1
      SourceSecurityGroupId: !GetAtt SageMakerSecurityGroup.GroupId
      GroupId: !Ref LambdaSecurityGroup

  LambdaSecurityGroupSelfIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: 'Allow traffic from within'
      IpProtocol: -1
      SourceSecurityGroupId: !GetAtt LambdaSecurityGroup.GroupId
      GroupId: !Ref LambdaSecurityGroup

  SageMakerSecurityGroupLambdaIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: 'Allow traffic from Lambda'
      IpProtocol: -1
      SourceSecurityGroupId: !GetAtt LambdaSecurityGroup.GroupId
      GroupId: !Ref SageMakerSecurityGroup

  SageMakerSecurityGroupMSKIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: 'Allow traffic from MSK'
      IpProtocol: -1
      SourceSecurityGroupId: !GetAtt MSKSecurityGroup.GroupId
      GroupId: !Ref SageMakerSecurityGroup

  SageMakerSecurityGroupSelfIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: 'Allow traffic from within'
      IpProtocol: -1
      SourceSecurityGroupId: !GetAtt SageMakerSecurityGroup.GroupId
      GroupId: !Ref SageMakerSecurityGroup

# Security Group Egress Rules

  MSKSecurityGroupAllIPv4TrafficEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      Description: 'Allow all ipv4 egress traffic'
      IpProtocol: -1
      CidrIp: '0.0.0.0/0'
      GroupId: !Ref MSKSecurityGroup

  MSKSecurityGroupAllIPv6TrafficEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      Description: 'Allow all ipv4 egress traffic'
      IpProtocol: -1
      CidrIpv6: '::/0'
      GroupId: !Ref MSKSecurityGroup
  
  MSKSecurityGroupLambdaEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      Description: 'Allow egress traffic to Lambda'
      IpProtocol: -1
      DestinationSecurityGroupId: !GetAtt LambdaSecurityGroup.GroupId
      GroupId: !Ref MSKSecurityGroup

  MSKSecurityGroupSageMakerEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      Description: 'Allow egress traffic to SageMaker'
      IpProtocol: -1
      DestinationSecurityGroupId: !GetAtt SageMakerSecurityGroup.GroupId
      GroupId: !Ref MSKSecurityGroup

  MSKSecurityGroupSelfEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      Description: 'Allow egress traffic to within'
      IpProtocol: -1
      DestinationSecurityGroupId: !GetAtt MSKSecurityGroup.GroupId
      GroupId: !Ref MSKSecurityGroup

  LambdaSecurityGroupAllIPv4TrafficEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      Description: 'Allow all ipv4 egress traffic'
      IpProtocol: -1
      CidrIp: '0.0.0.0/0'
      GroupId: !Ref LambdaSecurityGroup

  LambdaSecurityGroupAllIPv6TrafficEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      Description: 'Allow all ipv4 egress traffic'
      IpProtocol: -1
      CidrIpv6: '::/0'
      GroupId: !Ref LambdaSecurityGroup

  LambdaSecurityGroupMSKEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      Description: 'Allow egress traffic to MSK'
      IpProtocol: -1
      DestinationSecurityGroupId: !GetAtt MSKSecurityGroup.GroupId
      GroupId: !Ref LambdaSecurityGroup

  LambdaSecurityGroupSageMakerEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      Description: 'Allow egress traffic to SageMaker'
      IpProtocol: -1
      DestinationSecurityGroupId: !GetAtt SageMakerSecurityGroup.GroupId
      GroupId: !Ref LambdaSecurityGroup

  LambdaSecurityGroupSelfEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      Description: 'Allow egress traffic to within'
      IpProtocol: -1
      DestinationSecurityGroupId: !GetAtt LambdaSecurityGroup.GroupId
      GroupId: !Ref LambdaSecurityGroup

  SageMakerSecurityGroupLambdaEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      Description: 'Allow egress traffic to Lambda'
      IpProtocol: -1
      DestinationSecurityGroupId: !GetAtt LambdaSecurityGroup.GroupId
      GroupId: !Ref SageMakerSecurityGroup

  SageMakerSecurityGroupMSKEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      Description: 'Allow egress traffic to MSK'
      IpProtocol: -1
      DestinationSecurityGroupId: !GetAtt MSKSecurityGroup.GroupId
      GroupId: !Ref SageMakerSecurityGroup

  SageMakerSecurityGroupSelfEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      Description: 'Allow egress traffic to within'
      IpProtocol: -1
      DestinationSecurityGroupId: !GetAtt SageMakerSecurityGroup.GroupId
      GroupId: !Ref SageMakerSecurityGroup

  SageMakerSecurityGroupAllIPv4TrafficEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      Description: 'Allow all ipv4 egress traffic'
      IpProtocol: -1
      CidrIp: '0.0.0.0/0'
      GroupId: !Ref SageMakerSecurityGroup

  SageMakerSecurityGroupAllIPv6TrafficEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      Description: 'Allow all ipv4 egress traffic'
      IpProtocol: -1
      CidrIpv6: '::/0'
      GroupId: !Ref SageMakerSecurityGroup

# IAM Roles and Policies

  SageMakerExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${AWS::StackName}SageMakerExecutionRole'
      Description: 'SageMaker Execution Role'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - sagemaker.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSLambda_ReadOnlyAccess
        - arn:aws:iam::aws:policy/AmazonSageMakerFullAccess
      Tags:
        - Key: 'Name'
          Value: !Join [ "", [ !Ref "AWS::StackName","SageMakerExecutionRole" ] ] 

  SageMakerIAMAccessPolicy: 
    Type: AWS::IAM::Policy
    Properties: 
      PolicyName: !Sub '${AWS::StackName}SageMakerIAMAccessPolicy'
      PolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - Effect: "Allow"
            Action: 
              - iam:CreateRole
              - iam:DeleteRole
              - iam:AttachRolePolicy
              - iam:DetachRolePolicy
              - iam:PassRole
              - iam:ListRoles
              - iam:ListRolePolicies
              - iam:ListAttachedRolePolicies
              - iam:GetRole
              - iam:GetRolePolicy
              - iam:SimulatePrincipalPolicy
            Resource: !Sub 'arn:aws:iam::${AWS::AccountId}:*'
      Roles: 
        - Ref: 'SageMakerExecutionRole'

  SageMakerCloudWatchMetricsAccessPolicy: 
    Type: AWS::IAM::Policy
    Properties: 
      PolicyName: !Sub '${AWS::StackName}SageMakerCloudWatchMetricsAccessPolicy'
      PolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - Effect: "Allow"
            Action: 
              - cloudwatch:DeleteAlarms
              - cloudwatch:DescribeAlarms
              - cloudwatch:GetMetricData
              - cloudwatch:GetMetricStatistics
              - cloudwatch:ListMetrics
              - cloudwatch:PutMetricAlarm
              - cloudwatch:PutMetricData
            Resource: '*'
      Roles: 
        - Ref: "SageMakerExecutionRole"

  SageMakerCloudWatchLogsAccessPolicy: 
    Type: AWS::IAM::Policy
    Properties: 
      PolicyName: !Sub '${AWS::StackName}SageMakerCloudWatchLogsAccessPolicy'
      PolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - Effect: "Allow"
            Action: 
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:DescribeLogGroups
              - logs:DescribeLogStreams
              - logs:GetLogEvents
              - logs:PutLogEvents
              - logs:CreateLogDelivery
              - logs:DeleteLogDelivery
              - logs:DescribeResourcePolicies
              - logs:GetLogDelivery
              - logs:ListLogDeliveries
              - logs:PutResourcePolicy
              - logs:UpdateLogDelivery
            Resource: 'arn:aws:logs:*:*:*'
      Roles: 
        - Ref: "SageMakerExecutionRole"

  SageMakerMSKAccessPolicy: 
    Type: AWS::IAM::Policy
    Properties: 
      PolicyName: !Sub '${AWS::StackName}SageMakerMSKAccessPolicy'
      PolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - Effect: "Allow"
            Action: 
              - kafka:DescribeClusterV2
              - kafka:GetBootstrapBrokers
              - kafka-cluster:Connect
              - kafka-cluster:AlterCluster
              - kafka-cluster:DescribeCluster
              - kafka-cluster:DescribeTopic
              - kafka-cluster:WriteData
              - kafka-cluster:ReadData
              - kafka-cluster:AlterGroup
              - kafka-cluster:DescribeGroup
            Resource: !Sub  'arn:aws:kafka:${AWS::Region}:${AWS::AccountId}:*'
      Roles: 
        - Ref: "SageMakerExecutionRole"

  SageMakerCloudFormationAccessPolicy:
    Type: AWS::IAM::Policy
    Properties: 
      PolicyName: !Sub '${AWS::StackName}SageMakerCloudFormationAccessPolicy'
      PolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - Effect: "Allow"
            Action: 
              - cloudformation:DescribeStackResource
            Resource: !Sub 'arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:*'
      Roles: 
        - Ref: "SageMakerExecutionRole"

  SageMakerS3AccessPolicy:
    Type: AWS::IAM::Policy
    Properties: 
      PolicyName: !Sub '${AWS::StackName}SageMakerS3AccessPolicy'
      PolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - Effect: "Allow"
            Action: 
              - s3:PutBucketPolicy
              - s3:PutObject
              - s3:GetObject
              - s3:GetObjectVersion
              - s3:DeleteObject
              - s3:DeleteObjectVersion
              - s3:DeleteObject
            Resource: !Sub 'arn:aws:s3:::*'
      Roles: 
        - Ref: "SageMakerExecutionRole"

  SageMakerBedrockAccessPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub '${AWS::StackName}SageMakerBedrockAccessPolicy'
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action: 
              - bedrock:AssociateAgentKnowledgeBase
              - bedrock:CreateDataSource
              - bedrock:AllowVendedLogDeliveryForResource 
              - bedrock:DeleteDataSource
              - bedrock:DeleteKnowledgeBase
              - bedrock:DeleteKnowledgeBaseDocuments
              - bedrock:DisassociateAgentKnowledgeBase
              - bedrock:GetAgentKnowledgeBase
              - bedrock:GetDataSource
              - bedrock:GetKnowledgeBase
              - bedrock:GetKnowledgeBaseDocuments
              - bedrock:IngestKnowledgeBaseDocuments
              - bedrock:ListDataSources
              - bedrock:ListIngestionJobs
              - bedrock:ListKnowledgeBaseDocuments
              - bedrock:ListTagsForResource
              - bedrock:Retrieve
              - bedrock:StartIngestionJob
              - bedrock:StopIngestionJob
              - bedrock:TagResource
              - bedrock:UntagResource
              - bedrock:UpdateAgentKnowledgeBase
              - bedrock:UpdateDataSource
              - bedrock:UpdateKnowledgeBase
              - bedrock:ListKnowledgeBases
            Resource: '*'
      Roles: 
        - Ref: "SageMakerExecutionRole"

  SageMakerLambdaAccessPolicy:
    Type: AWS::IAM::Policy
    Properties: 
      PolicyName: !Sub '${AWS::StackName}SageMakerLambdaAccessPolicy'
      PolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - Effect: "Allow"
            Action: 
              - lambda:GetAccountSettings
              - lambda:GetEventSourceMapping
              - lambda:GetFunction
              - lambda:GetFunctionConfiguration
              - lambda:GetFunctionCodeSigningConfig
              - lambda:GetFunctionConcurrency
              - lambda:ListEventSourceMappings
              - lambda:ListFunctions
              - lambda:ListTags
              - lambda:AddPermission
              - lambda:PutFunctionConcurrency
              - lambda:DeleteEventSourceMapping
              - lambda:UpdateEventSourceMapping
              - lambda:CreateEventSourceMapping
              - lambda:UpdateFunctionConfiguration
              - lambda:GetFunctionConfiguration
            Resource: !Sub 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:*'
      Roles: 
        - Ref: "SageMakerExecutionRole"

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${AWS::StackName}LambdaExecutionRole'
      Description: 'Lambda Execution Role'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Path: /
      Tags:
        - Key: 'Name'
          Value: !Join [ "", [ !Ref "AWS::StackName","LambdaExecutionRole" ] ]

  LambdaBedrockAccessPolicy:
    Type: AWS::IAM::Policy
    Properties: 
      PolicyName: !Sub '${AWS::StackName}LambdaBedrockAccessPolicy'
      PolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - Effect: "Allow"
            Action: 
              - bedrock:AssociateAgentKnowledgeBase
              - bedrock:CreateDataSource
              - bedrock:AllowVendedLogDeliveryForResource 
              - bedrock:DeleteDataSource
              - bedrock:DeleteKnowledgeBase
              - bedrock:DeleteKnowledgeBaseDocuments
              - bedrock:DisassociateAgentKnowledgeBase
              - bedrock:GetAgentKnowledgeBase
              - bedrock:GetDataSource
              - bedrock:GetKnowledgeBase
              - bedrock:GetKnowledgeBaseDocuments
              - bedrock:IngestKnowledgeBaseDocuments
              - bedrock:ListDataSources
              - bedrock:ListIngestionJobs
              - bedrock:ListKnowledgeBaseDocuments
              - bedrock:ListTagsForResource
              - bedrock:Retrieve
              - bedrock:StartIngestionJob
              - bedrock:StopIngestionJob
              - bedrock:TagResource
              - bedrock:UntagResource
              - bedrock:UpdateAgentKnowledgeBase
              - bedrock:UpdateDataSource
              - bedrock:UpdateKnowledgeBase
            Resource: '*'
      Roles: 
        - Ref: 'LambdaExecutionRole'

  LambdaMSKAccessPolicy: 
    Type: AWS::IAM::Policy
    Properties: 
      PolicyName: !Sub '${AWS::StackName}SageMakerMSKAccessPolicy'
      PolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - Effect: "Allow"
            Action: 
              - kafka:DescribeClusterV2
              - kafka:GetBootstrapBrokers
              - kafka-cluster:Connect
              - kafka-cluster:DescribeCluster
              - kafka-cluster:DescribeTopic
              - kafka-cluster:ReadData
              - kafka-cluster:DescribeGroup
              - kafka-cluster:DescribeClusterDynamicConfiguration
              - kafka-cluster:AlterGroup
            Resource: !Sub  'arn:aws:kafka:${AWS::Region}:${AWS::AccountId}:*'
      Roles: 
        - Ref: "LambdaExecutionRole"

  LambdaCloudWatchMetricsAccessPolicy: 
    Type: AWS::IAM::Policy
    Properties: 
      PolicyName: !Sub '${AWS::StackName}LambdaCloudWatchMetricsAccessPolicy'
      PolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - Effect: "Allow"
            Action: 
              - cloudwatch:DeleteAlarms
              - cloudwatch:DescribeAlarms
              - cloudwatch:GetMetricData
              - cloudwatch:GetMetricStatistics
              - cloudwatch:ListMetrics
              - cloudwatch:PutMetricAlarm
              - cloudwatch:PutMetricData
            Resource: '*'
      Roles: 
        - Ref: "LambdaExecutionRole"

  LambdaCloudWatchLogsAccessPolicy: 
    Type: AWS::IAM::Policy
    Properties: 
      PolicyName: !Sub '${AWS::StackName}LambdaCloudWatchLogsAccessPolicy'
      PolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - Effect: "Allow"
            Action: 
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:DescribeLogGroups
              - logs:DescribeLogStreams
              - logs:GetLogEvents
              - logs:PutLogEvents
              - logs:CreateLogDelivery
              - logs:DeleteLogDelivery
              - logs:DescribeResourcePolicies
              - logs:GetLogDelivery
              - logs:ListLogDeliveries
              - logs:PutResourcePolicy
              - logs:UpdateLogDelivery
            Resource: 'arn:aws:logs:*:*:*'
      Roles: 
        - Ref: "LambdaExecutionRole"

  LambdaENIAccessPolicy: 
    Type: AWS::IAM::Policy
    Properties: 
      PolicyName: !Sub '${AWS::StackName}LambdaENIAccessPolicy'
      PolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - Effect: "Allow"
            Action: 
              - ec2:DescribeNetworkInterfaces
              - ec2:CreateNetworkInterface
              - ec2:DeleteNetworkInterface
              - ec2:DescribeInstances
              - ec2:AttachNetworkInterface
              - ec2:DescribeSecurityGroups
              - ec2:DescribeSubnets
              - ec2:DescribeVpcs
            Resource: '*'
      Roles: 
        - Ref: "LambdaExecutionRole"

# Lambda Function

  KafkaConsumerLambdaFunction:
    Type: AWS::Lambda::Function
    DependsOn:
      - LambdaENIAccessPolicy
      - LambdaCloudWatchLogsAccessPolicy
      - LambdaCloudWatchMetricsAccessPolicy
      - LambdaMSKAccessPolicy
      - LambdaBedrockAccessPolicy
    Properties:
      FunctionName: !Sub '${AWS::StackName}KafkaConsumerLambdaFunction'
      Description: 'Kafka Consumer Lambda Function'
      ReservedConcurrentExecutions: 50
      Handler: index.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 900
      Runtime: python3.13
      Tags:
        - Key: 'Name'
          Value: !Join [ "", [ !Ref "AWS::StackName","KafkaConsumerLambdaFunction" ] ]
      VpcConfig:
        SecurityGroupIds: 
          - Ref: 'LambdaSecurityGroup'
        SubnetIds: 
          - Ref: 'PrivateSubnet1'
          - Ref: 'PrivateSubnet2'
      Code:
        ZipFile: !Sub
          - |
            import os
            import json
            import base64
            import logging
            import time
            import uuid
            import sys
            from datetime import datetime
            from pip._internal import main

            main(['install', '-I', '-q', 'boto3', '--target', '/tmp/', '--no-cache-dir', '--disable-pip-version-check'])
            main(['install', '-I', '-q', 'botocore', '--target', '/tmp/', '--no-cache-dir', '--disable-pip-version-check'])
            sys.path.insert(0,'/tmp/')

            import boto3
            import botocore
            from botocore.exceptions import ClientError
            
            bedrock_agent_client = boto3.client('bedrock-agent')

            def lambda_handler(event, context):
                print(f'boto3 version: {boto3.__version__}')
                print(f'botocore version: {botocore.__version__}')
                print('## ENVIRONMENT VARIABLES')
                print(os.environ['AWS_LAMBDA_LOG_GROUP_NAME'])
                print(os.environ['AWS_LAMBDA_LOG_STREAM_NAME'])
                kb_id = os.environ['KBID']
                print(kb_id)
                ds_id = os.environ['DSID']
                print(ds_id)
                print('## EVENT')
                print(event)

                records = event['records']['streamtopic-0']

                for rec in records:
                    # Each record has separate eventID, etc.
                    print('## RECORD')
                    event_payload = decode_payload(rec['value'])
                    print('Decoded event main', event_payload)
                    ticker = event_payload['ticker']
                    price = event_payload['price']
                    timestamp = event_payload['timestamp']
                    myuuid = uuid.uuid4()
                    print('## RECORD UUID', str(myuuid))
                    print('## TICKER: ', ticker)
                    print('## PRICE: ', price)
                    payload_ts = datetime.utcfromtimestamp(timestamp).strftime('%Y-%m-%d %H:%M:%S')
                    print('## TIMESTAMP: ', payload_ts)
                    payload_string = "At " + payload_ts + " the price of " + ticker + " is " + str(price) + "."
                    print('## PAYLOAD STRING: ', payload_string)
                    time.sleep(5)
                    try:
                        ingest_knowledge_base_documents_response = bedrock_agent_client.ingest_knowledge_base_documents(
                            knowledgeBaseId = kb_id,
                            dataSourceId = ds_id,
                            documents= [
                                {
                                    'content': {
                                        'custom' : {
                                            'customDocumentIdentifier': {
                                                'id' : str(myuuid)
                                            },
                                            'inlineContent' : {
                                                'textContent' : {
                                                    'data' : payload_string
                                                },
                                                'type' : 'TEXT'
                                            },
                                            'sourceType' : 'IN_LINE'
                                        },
                                        'dataSourceType' : 'CUSTOM'
                                    }
                                }
                            ]
                        )
                        print('## INGEST KNOWLEDGE BASE DOCUMENTS RESPONSE: ', ingest_knowledge_base_documents_response)
                    except botocore.exceptions.ClientError as error:
                        raise error

                return {
                    'statusCode': 200,
                    'body': json.dumps('Success from Lambda!')
                }

            def decode_payload(event_data):
                print('Received event', event_data)
                agg_data_bytes = base64.b64decode(event_data)
                decoded_data = agg_data_bytes.decode(encoding="utf-8") 
                event_payload = json.loads(decoded_data)
                print('Decoded event', event_payload)
                logging.info(f'Decoded data from kafka topic: {event_payload}')
                return event_payload    
          - Region: !Ref AWS::Region

# MSK Cluster

  MSKLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "${AWS::StackName}MSKLogGroup"
      RetentionInDays: 7

  MSKCluster:
    Type: AWS::MSK::Cluster
    Properties:
      BrokerNodeGroupInfo:
        InstanceType: kafka.t3.small
        ClientSubnets:
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
        SecurityGroups: [!Ref MSKSecurityGroup]
        StorageInfo:
          EBSStorageInfo:
            VolumeSize: 5
      ClusterName: !Sub '${AWS::StackName}MSKCluster'
      LoggingInfo:
        BrokerLogs: 
          CloudWatchLogs:
            Enabled: true
            LogGroup: !Ref MSKLogGroup
      EncryptionInfo:
        EncryptionInTransit:
          ClientBroker: TLS_PLAINTEXT
          InCluster: false
      EnhancedMonitoring: DEFAULT
      KafkaVersion: 2.8.0
      NumberOfBrokerNodes: 2
      ClientAuthentication:
        Unauthenticated:
          Enabled: true

# SageMaker Studio

  StudioDomain:
    Type: AWS::SageMaker::Domain
    DependsOn:
      - SageMakerExecutionRole
      - SageMakerSecurityGroup
      - PrivateSubnet1
      - PrivateSubnet2
      - SageMakerSecurityGroupAllIPv6TrafficEgress
      - SageMakerSecurityGroupAllIPv4TrafficEgress
      - SageMakerSecurityGroupSelfEgress
      - SageMakerSecurityGroupMSKEgress
      - SageMakerSecurityGroupLambdaEgress
      - SageMakerSecurityGroupSelfIngress
      - SageMakerSecurityGroupMSKIngress
      - SageMakerSecurityGroupLambdaIngress
    Properties:
      AppNetworkAccessType: VpcOnly
      AppSecurityGroupManagement: Customer
      AuthMode: IAM
      DefaultUserSettings:
        ExecutionRole: !GetAtt SageMakerExecutionRole.Arn
        SecurityGroups: [!Ref SageMakerSecurityGroup]
        StudioWebPortal: ENABLED
        DefaultLandingUri: "studio::"
      DomainName: !Sub '${AWS::StackName}SageMakerStudioDomain'
      DomainSettings:
        SecurityGroupIds:
          - !Ref SageMakerSecurityGroup
      DefaultSpaceSettings:
        ExecutionRole: !GetAtt SageMakerExecutionRole.Arn
        SecurityGroups: [!Ref SageMakerSecurityGroup]
        SpaceStorageSettings:
          DefaultEbsStorageSettings:
            DefaultEbsVolumeSizeInGb: 5
            MaximumEbsVolumeSizeInGb: 50
      SubnetIds: 
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      VpcId: !Ref 'VPC'

  UserProfile:
    Type: AWS::SageMaker::UserProfile
    DependsOn:
      - StudioDomain
    Properties:
      DomainId: !GetAtt StudioDomain.DomainId
      UserProfileName: !Sub '${AWS::StackName}SageMakerUserProfile'
      UserSettings:
        DefaultLandingUri: 'studio::'
        ExecutionRole: !GetAtt SageMakerExecutionRole.Arn
        SecurityGroups: [!Ref SageMakerSecurityGroup]